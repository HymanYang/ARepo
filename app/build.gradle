apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "arepo.yunji.com.myapplication"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    testImplementation 'junit:junit:4.12'


    implementation project(':common')
}


project.afterEvaluate {

    println "=============afterEvaluate======"

    def branch = getGitBranch()
    println "Main__branch_" + branch
    def branchV2 = getSubmoduleBranch()
    println "submodule__branch_" + branchV2


    if (branchV2.equals("master") && branch.equals(branchV2)) {

        println "============== master"

    } else {

        println "============== master error"

        throw new RuntimeException("git branch is error")
    }


}


/**
 * 获取Git 分支名
 */
def getGitBranch() {
    return 'git symbolic-ref --short -q HEAD'.execute().text.trim()
}


/**
 * 获取子Git分支名
 */
def getSubmoduleBranch() {

    def value = new ByteArrayOutputStream()
    exec {
        workingDir("../ARepoLib")
        commandLine "sh", "-c", "git symbolic-ref --short -q HEAD"
        standardOutput = value
    }
    return value.toString().trim()
}